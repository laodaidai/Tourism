package com.example.tourism.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.tourism.database.bean.ContactsBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CONTACTS_BEAN".
*/
public class ContactsBeanDao extends AbstractDao<ContactsBean, Long> {

    public static final String TABLENAME = "CONTACTS_BEAN";

    /**
     * Properties of entity ContactsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Contactsid = new Property(0, Long.class, "contactsid", true, "_id");
        public final static Property CName = new Property(1, String.class, "cName", false, "C_NAME");
        public final static Property CtellPhone = new Property(2, String.class, "ctellPhone", false, "CTELL_PHONE");
        public final static Property CQQ = new Property(3, String.class, "cQQ", false, "C_QQ");
        public final static Property CWechat = new Property(4, String.class, "cWechat", false, "C_WECHAT");
        public final static Property CDate = new Property(5, java.util.Date.class, "cDate", false, "C_DATE");
    }


    public ContactsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACTS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: contactsid
                "\"C_NAME\" TEXT NOT NULL ," + // 1: cName
                "\"CTELL_PHONE\" TEXT NOT NULL ," + // 2: ctellPhone
                "\"C_QQ\" TEXT," + // 3: cQQ
                "\"C_WECHAT\" TEXT," + // 4: cWechat
                "\"C_DATE\" INTEGER NOT NULL );"); // 5: cDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactsBean entity) {
        stmt.clearBindings();
 
        Long contactsid = entity.getContactsid();
        if (contactsid != null) {
            stmt.bindLong(1, contactsid);
        }
        stmt.bindString(2, entity.getCName());
        stmt.bindString(3, entity.getCtellPhone());
 
        String cQQ = entity.getCQQ();
        if (cQQ != null) {
            stmt.bindString(4, cQQ);
        }
 
        String cWechat = entity.getCWechat();
        if (cWechat != null) {
            stmt.bindString(5, cWechat);
        }
        stmt.bindLong(6, entity.getCDate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactsBean entity) {
        stmt.clearBindings();
 
        Long contactsid = entity.getContactsid();
        if (contactsid != null) {
            stmt.bindLong(1, contactsid);
        }
        stmt.bindString(2, entity.getCName());
        stmt.bindString(3, entity.getCtellPhone());
 
        String cQQ = entity.getCQQ();
        if (cQQ != null) {
            stmt.bindString(4, cQQ);
        }
 
        String cWechat = entity.getCWechat();
        if (cWechat != null) {
            stmt.bindString(5, cWechat);
        }
        stmt.bindLong(6, entity.getCDate().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactsBean readEntity(Cursor cursor, int offset) {
        ContactsBean entity = new ContactsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // contactsid
            cursor.getString(offset + 1), // cName
            cursor.getString(offset + 2), // ctellPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cQQ
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cWechat
            new java.util.Date(cursor.getLong(offset + 5)) // cDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactsBean entity, int offset) {
        entity.setContactsid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCName(cursor.getString(offset + 1));
        entity.setCtellPhone(cursor.getString(offset + 2));
        entity.setCQQ(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCWechat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCDate(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactsBean entity, long rowId) {
        entity.setContactsid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactsBean entity) {
        if(entity != null) {
            return entity.getContactsid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactsBean entity) {
        return entity.getContactsid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
