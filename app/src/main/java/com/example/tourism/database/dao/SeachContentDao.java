package com.example.tourism.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.tourism.database.bean.SeachContent;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SEACH_CONTENT".
*/
public class SeachContentDao extends AbstractDao<SeachContent, Long> {

    public static final String TABLENAME = "SEACH_CONTENT";

    /**
     * Properties of entity SeachContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ScId = new Property(0, Long.class, "scId", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property SDate = new Property(3, java.util.Date.class, "sDate", false, "S_DATE");
    }


    public SeachContentDao(DaoConfig config) {
        super(config);
    }
    
    public SeachContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEACH_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: scId
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"S_DATE\" INTEGER NOT NULL );"); // 3: sDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEACH_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SeachContent entity) {
        stmt.clearBindings();
 
        Long scId = entity.getScId();
        if (scId != null) {
            stmt.bindLong(1, scId);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getSDate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SeachContent entity) {
        stmt.clearBindings();
 
        Long scId = entity.getScId();
        if (scId != null) {
            stmt.bindLong(1, scId);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getSDate().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SeachContent readEntity(Cursor cursor, int offset) {
        SeachContent entity = new SeachContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // scId
            cursor.getString(offset + 1), // url
            cursor.getString(offset + 2), // content
            new java.util.Date(cursor.getLong(offset + 3)) // sDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SeachContent entity, int offset) {
        entity.setScId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setSDate(new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SeachContent entity, long rowId) {
        entity.setScId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SeachContent entity) {
        if(entity != null) {
            return entity.getScId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SeachContent entity) {
        return entity.getScId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
