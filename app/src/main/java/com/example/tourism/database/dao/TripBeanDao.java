package com.example.tourism.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.tourism.database.bean.TripBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TRIP_BEAN".
*/
public class TripBeanDao extends AbstractDao<TripBean, Long> {

    public static final String TABLENAME = "TRIP_BEAN";

    /**
     * Properties of entity TripBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TripId = new Property(0, Long.class, "tripId", true, "_id");
        public final static Property TName = new Property(1, String.class, "tName", false, "T_NAME");
        public final static Property TIdentitycard = new Property(2, String.class, "tIdentitycard", false, "T_IDENTITYCARD");
        public final static Property TType = new Property(3, String.class, "tType", false, "T_TYPE");
    }


    public TripBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TripBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRIP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tripId
                "\"T_NAME\" TEXT NOT NULL ," + // 1: tName
                "\"T_IDENTITYCARD\" TEXT NOT NULL ," + // 2: tIdentitycard
                "\"T_TYPE\" TEXT);"); // 3: tType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRIP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TripBean entity) {
        stmt.clearBindings();
 
        Long tripId = entity.getTripId();
        if (tripId != null) {
            stmt.bindLong(1, tripId);
        }
        stmt.bindString(2, entity.getTName());
        stmt.bindString(3, entity.getTIdentitycard());
 
        String tType = entity.getTType();
        if (tType != null) {
            stmt.bindString(4, tType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TripBean entity) {
        stmt.clearBindings();
 
        Long tripId = entity.getTripId();
        if (tripId != null) {
            stmt.bindLong(1, tripId);
        }
        stmt.bindString(2, entity.getTName());
        stmt.bindString(3, entity.getTIdentitycard());
 
        String tType = entity.getTType();
        if (tType != null) {
            stmt.bindString(4, tType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TripBean readEntity(Cursor cursor, int offset) {
        TripBean entity = new TripBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tripId
            cursor.getString(offset + 1), // tName
            cursor.getString(offset + 2), // tIdentitycard
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // tType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TripBean entity, int offset) {
        entity.setTripId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTName(cursor.getString(offset + 1));
        entity.setTIdentitycard(cursor.getString(offset + 2));
        entity.setTType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TripBean entity, long rowId) {
        entity.setTripId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TripBean entity) {
        if(entity != null) {
            return entity.getTripId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TripBean entity) {
        return entity.getTripId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
